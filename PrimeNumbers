void AttemptThree() {
	const int numOfRepeats = 100000;//The amount I want to test.
	LARGE_INTEGER t1, t2, freq;//Timer stuff
	double sqrtPrime = sqrt(numOfRepeats);//The square root of the max
	short firstFor;
	int secondFor;
	bool * primeArray = new bool[numOfRepeats];//The bool array
	int times = 0;
	int amountOfPrimes = 0;

	for (int i = 3; i <= numOfRepeats; ++i) {//Loop through and set all of the array to true
		primeArray[i] = i % 2;//Sets the value to either 1 or 0 depending on if it is even or odd
	}

	printf("Sieve of Eratosthenes ");
//	printf("Press any key to get prime numbers!!!\n\n");
//	_getch();
	QueryPerformanceFrequency(&freq);
	QueryPerformanceCounter(&t1);//Start timer

	for (firstFor = 3; firstFor < sqrtPrime; firstFor+=2) {//First for loop goes through the square roots
		if (primeArray[firstFor]) {//Checks if the value in the array is true, this saves it from going through the same numbers twice
			for (secondFor = 3; secondFor < 33333; secondFor+=2){//Second for loop goes through and does the first number times the second
				times = firstFor * secondFor;//This does the timing
				if (times > numOfRepeats) {//Checks if the answer is bigger than the highest it can be
					break;//if it is; break out
				}
				primeArray[times] = false;//if it is not; set the value to false. Making it !prime number
			}
		}
	}
	QueryPerformanceCounter(&t2);//End timer

	for (int i = 0; i <= numOfRepeats; ++i) {//goes through all of the numbers and counts up the prime numbers
		if (primeArray[i] == true) {
			++amountOfPrimes;
		}
	}
	//Prints out how long it took and how many there are
	printf("took %f seconds to get %i numbers\n\n\n", (long float)(((long float)t2.QuadPart - (long float)t1.QuadPart) * 100000 / freq.QuadPart) / 100000, amountOfPrimes);
	main();//Back to main

}
