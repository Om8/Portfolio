void ACS_Character_Base_CPP::Respawn() {
	isDead = false;
	health = maxHealth;
	//If is the server do this
	if (HasAuthority()) {
		//Print to log
		UE_LOG(LogTemp, Warning, TEXT("Called spawn player"));

		//Gets all spawn locations in world and checks if any of them can be used to spawn
		TArray<ACS_SpawnLocation_CPP*> spawnsThatCanBeUsed;
		for (TActorIterator<ACS_SpawnLocation_CPP> ActorItr(GetWorld()); ActorItr; ++ActorItr) {
			ACS_SpawnLocation_CPP *spawnLocation = *ActorItr;
			FName spawnTeam = spawnLocation->teamData.RowContents;
			//Found a better way of doing this, but this works for now.
			ETeam teamEnum = Cast<ACS_PlayerState_CPP>(PlayerState)->teamInformation.team;
			const UEnum* enumPtr = FindObject<UEnum>(ANY_PACKAGE, TEXT("ETeam"), true);
			if (!enumPtr) {
				UE_LOG(LogTemp, Warning, TEXT("Not valid"));
			}
			else {
				FName currentPlayerTeam = FName(enumPtr->GetNameByValue((int64)teamEnum));

				FString* newCurrentTeam = new FString;
				currentPlayerTeam.ToString().Split("::", nullptr, newCurrentTeam, ESearchCase::IgnoreCase, ESearchDir::FromStart);
				//UE_LOG(LogTemp, Display, TEXT("%s"), *currentPlayerTeam.ToString());
				//UE_LOG(LogTemp, Display, TEXT("%s"), *spawnTeam.ToString());

				if (newCurrentTeam->Equals(spawnTeam.ToString(), ESearchCase::IgnoreCase)) {
					//	UE_LOG(LogTemp, Warning, TEXT("Spawn"));
					spawnsThatCanBeUsed.Add(spawnLocation);
				}
			}
		}

		if (spawnsThatCanBeUsed.Num() > 0) {
			ACS_SpawnLocation_CPP *chosenSpawn = spawnsThatCanBeUsed[FMath::RandRange(0, spawnsThatCanBeUsed.Num() - 1)];
			SetActorLocation(chosenSpawn->GetActorLocation() + FVector(0, 0, 100), false, nullptr, ETeleportType::TeleportPhysics);
		}
		else {
			UE_LOG(LogTemp, Warning, TEXT("Cannot spawn player"));
		}
	}
}
